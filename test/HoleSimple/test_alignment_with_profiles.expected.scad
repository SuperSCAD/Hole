// Unit of length: Unit.MM
$fn = 360;
$vpr = [90.0, 0.0, 0.0];

union()
{
   rotate_extrude(angle = 360.0)
   {
      difference()
      {
         union()
         {
            polygon(points = [[0.0, -10.35], [0.0, -10.0], [0.0, 0.0], [0.0, 0.35], [1.0, 0.35], [1.0, 0.0], [1.0, -10.0], [1.0, -10.35]]);
            polygon(points = [[0.0, -10.35], [0.0, -10.0], [0.0, 0.0], [0.0, 0.35], [1.0, 0.35], [1.0, 0.0], [1.0, -10.0], [1.0, -10.35]]);
            translate(v = [1.0, 0.0])
            {
               rotate(a = 45.0)
               {
                  difference()
                  {
                     polygon(points = [[0.0, 0.495], [0.9546, -0.4596], [0.7071, -0.7071], [-0.7071, -0.7071], [-0.9546, -0.4596]], convexity = 2);
                     translate(v = [0.0, -1.4142])
                     {
                        circle(d = 2.0, $fn = 360);
                     }
                  }
               }
            }
            translate(v = [1.0, -10.0])
            {
               polygon(points = [[-0.35, -0.35], [-0.35, 0.7071], [0.0, 0.7071], [0.7071, 0.0], [0.7071, -0.35]]);
            }
         }
         translate(v = [-2.35, -0.35])
         {
            polygon(points = [[-0.35, -0.35], [-0.35, 11.05], [2.35, 11.05], [2.35, 10.7], [2.35, 0.0], [2.35, -0.35]]);
         }
      }
   }
   translate(v = [5.0, 0.0, 0.0])
   {
      rotate_extrude(angle = 360.0)
      {
         difference()
         {
            union()
            {
               polygon(points = [[0.0, -5.35], [0.0, -5.0], [0.0, 5.0], [0.0, 5.35], [1.0, 5.35], [1.0, 5.0], [1.0, -5.0], [1.0, -5.35]]);
               polygon(points = [[0.0, -5.35], [0.0, -5.0], [0.0, 5.0], [0.0, 5.35], [1.0, 5.35], [1.0, 5.0], [1.0, -5.0], [1.0, -5.35]]);
               translate(v = [1.0, 5.0])
               {
                  rotate(a = 45.0)
                  {
                     difference()
                     {
                        polygon(points = [[0.0, 0.495], [0.9546, -0.4596], [0.7071, -0.7071], [-0.7071, -0.7071], [-0.9546, -0.4596]], convexity = 2);
                        translate(v = [0.0, -1.4142])
                        {
                           circle(d = 2.0, $fn = 360);
                        }
                     }
                  }
               }
               translate(v = [1.0, -5.0])
               {
                  polygon(points = [[-0.35, -0.35], [-0.35, 0.7071], [0.0, 0.7071], [0.7071, 0.0], [0.7071, -0.35]]);
               }
            }
            translate(v = [-2.35, -0.35])
            {
               polygon(points = [[-0.35, -0.35], [-0.35, 11.05], [2.35, 11.05], [2.35, 10.7], [2.35, 0.0], [2.35, -0.35]]);
            }
         }
      }
   }
   translate(v = [10.0, 0.0, 0.0])
   {
      rotate_extrude(angle = 360.0)
      {
         difference()
         {
            union()
            {
               polygon(points = [[0.0, -0.35], [0.0, 0.0], [0.0, 10.0], [0.0, 10.35], [1.0, 10.35], [1.0, 10.0], [1.0, 0.0], [1.0, -0.35]]);
               polygon(points = [[0.0, -0.35], [0.0, 0.0], [0.0, 10.0], [0.0, 10.35], [1.0, 10.35], [1.0, 10.0], [1.0, 0.0], [1.0, -0.35]]);
               translate(v = [1.0, 10.0])
               {
                  rotate(a = 45.0)
                  {
                     difference()
                     {
                        polygon(points = [[0.0, 0.495], [0.9546, -0.4596], [0.7071, -0.7071], [-0.7071, -0.7071], [-0.9546, -0.4596]], convexity = 2);
                        translate(v = [0.0, -1.4142])
                        {
                           circle(d = 2.0, $fn = 360);
                        }
                     }
                  }
               }
               translate(v = [1.0, 0.0])
               {
                  polygon(points = [[-0.35, -0.35], [-0.35, 0.7071], [0.0, 0.7071], [0.7071, 0.0], [0.7071, -0.35]]);
               }
            }
            translate(v = [-2.35, -0.35])
            {
               polygon(points = [[-0.35, -0.35], [-0.35, 11.05], [2.35, 11.05], [2.35, 10.7], [2.35, 0.0], [2.35, -0.35]]);
            }
         }
      }
   }
}
